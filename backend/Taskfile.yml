version: 3
tasks:
  create_network:
    desc: Create a docker network for the app
    summary: If you are using app first time, you need to create a network for the app
    cmds:
      - docker network create {{.NETWORK_NAME}}
      - sleep 1
    status:
      - docker network ls --format "{{.Name}}" | grep -q {{.NETWORK_NAME}}

  up_db:
    desc: Up the mongodb docker container
    cmds:
      - docker run --network {{.NETWORK_NAME}} --name {{.MONGO_CONTAINER_NAME}}
        -p $MONGO_PORT:27017 -d mongo
    status:
      - docker ps -a --format "{{.Names}}" | grep -q {{.MONGO_CONTAINER_NAME}}
    internal: true

  start_db:
    desc: Start mongodb
    deps:
      - up_db
    cmds:
      - docker start {{.MONGO_CONTAINER_NAME}}
    ignore_error: true

  stop_db:
    desc: Stop mongodb
    cmd: docker stop {{.MONGO_CONTAINER_NAME}}

  up_redis:
    desc: Up the redis docker container
    cmds:
      - docker run --network {{.NETWORK_NAME}} --name {{.REDIS_CONTAINER_NAME}} -p $REDIS_PORT:6379 -d redis
    status:
      - docker ps -a --format "{{.Names}}" | grep -q {{.REDIS_CONTAINER_NAME}}
    internal: true

  start_redis:
    desc: Start redis db
    deps:
      - up_redis
    cmds:
      - docker start {{.REDIS_CONTAINER_NAME}}
    ignore_error: true

  stop_redis:
    desc: Stop redis db
    cmd: docker stop {{.REDIS_CONTAINER_NAME}}

  run:
    desc: Start app
    deps:
      - create_network
      - start_db
      - start_redis
    cmds:
      - sleep 2 # wait for db and redis to start
      - "{{.RUN_CMD}}"
      - defer: { task: stop_db }
      - defer: { task: stop_redis }
    # when error occurs, for some reason, its ignores defer task. so we need to ignore error
    ignore_error: true

  default:
    desc: Start app in watch mode
    deps:
      - create_network
      - start_db
      - start_redis
    cmds:
      - sleep 2 # wait for db and redis to start
      - watchexec -e go -r -- {{.RUN_CMD}}
      - defer: { task: stop_db }
      - defer: { task: stop_redis }

vars:
  RUN_CMD: go run .
  MONGO_CONTAINER_NAME: mongo_db
  REDIS_CONTAINER_NAME: redis_db
  NETWORK_NAME: chat_network

dotenv:
  - .env
