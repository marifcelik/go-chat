// Code generated by "enumer -type=ResultStatus -trimprefix=Result"; DO NOT EDIT.

package enums

import (
	"fmt"
	"strings"
)

const _ResultStatusName = "SuccessFailed"

var _ResultStatusIndex = [...]uint8{0, 7, 13}

const _ResultStatusLowerName = "successfailed"

func (i ResultStatus) String() string {
	if i < 0 || i >= ResultStatus(len(_ResultStatusIndex)-1) {
		return fmt.Sprintf("ResultStatus(%d)", i)
	}
	return _ResultStatusName[_ResultStatusIndex[i]:_ResultStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ResultStatusNoOp() {
	var x [1]struct{}
	_ = x[ResultSuccess-(0)]
	_ = x[ResultFailed-(1)]
}

var _ResultStatusValues = []ResultStatus{ResultSuccess, ResultFailed}

var _ResultStatusNameToValueMap = map[string]ResultStatus{
	_ResultStatusName[0:7]:       ResultSuccess,
	_ResultStatusLowerName[0:7]:  ResultSuccess,
	_ResultStatusName[7:13]:      ResultFailed,
	_ResultStatusLowerName[7:13]: ResultFailed,
}

var _ResultStatusNames = []string{
	_ResultStatusName[0:7],
	_ResultStatusName[7:13],
}

// ResultStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ResultStatusString(s string) (ResultStatus, error) {
	if val, ok := _ResultStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ResultStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ResultStatus values", s)
}

// ResultStatusValues returns all values of the enum
func ResultStatusValues() []ResultStatus {
	return _ResultStatusValues
}

// ResultStatusStrings returns a slice of all String values of the enum
func ResultStatusStrings() []string {
	strs := make([]string, len(_ResultStatusNames))
	copy(strs, _ResultStatusNames)
	return strs
}

// IsAResultStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ResultStatus) IsValid() bool {
	for _, v := range _ResultStatusValues {
		if i == v {
			return true
		}
	}
	return false
}
