// Code generated by "enumer -type=ConversationType -trimsuffix=Conversation"; DO NOT EDIT.

package enums

import (
	"fmt"
	"strings"
)

const _ConversationTypeName = "NormalGroup"

var _ConversationTypeIndex = [...]uint8{0, 6, 11}

const _ConversationTypeLowerName = "normalgroup"

func (i ConversationType) String() string {
	if i < 0 || i >= ConversationType(len(_ConversationTypeIndex)-1) {
		return fmt.Sprintf("ConversationType(%d)", i)
	}
	return _ConversationTypeName[_ConversationTypeIndex[i]:_ConversationTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ConversationTypeNoOp() {
	var x [1]struct{}
	_ = x[NormalConversation-(0)]
	_ = x[GroupConversation-(1)]
}

var _ConversationTypeValues = []ConversationType{NormalConversation, GroupConversation}

var _ConversationTypeNameToValueMap = map[string]ConversationType{
	_ConversationTypeName[0:6]:       NormalConversation,
	_ConversationTypeLowerName[0:6]:  NormalConversation,
	_ConversationTypeName[6:11]:      GroupConversation,
	_ConversationTypeLowerName[6:11]: GroupConversation,
}

var _ConversationTypeNames = []string{
	_ConversationTypeName[0:6],
	_ConversationTypeName[6:11],
}

// ConversationTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ConversationTypeString(s string) (ConversationType, error) {
	if val, ok := _ConversationTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ConversationTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ConversationType values", s)
}

// ConversationTypeValues returns all values of the enum
func ConversationTypeValues() []ConversationType {
	return _ConversationTypeValues
}

// ConversationTypeStrings returns a slice of all String values of the enum
func ConversationTypeStrings() []string {
	strs := make([]string, len(_ConversationTypeNames))
	copy(strs, _ConversationTypeNames)
	return strs
}

// IsAConversationType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ConversationType) IsValid() bool {
	for _, v := range _ConversationTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
